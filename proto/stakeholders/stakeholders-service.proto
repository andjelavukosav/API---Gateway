syntax = "proto3";

option go_package = "proto/stakeholders";

import "google/api/annotations.proto";

service StakeholdersService {
  // RPC za registraciju korisnika
  rpc RegisterUser (RegistrationRequest) returns (AuthenticationResponse) {
    option (google.api.http) = {
      post: "/users/register"
      body: "*"
    };
  }

  // RPC za login korisnika
  rpc LoginUser (LoginRequest) returns (AuthenticationResponse) {
    option (google.api.http) = {
      post: "/users/login"
      body: "*"
    };
  }

  // RPC za dobijanje svih korisnika
  rpc GetAllUsers (GetAllUsersRequest) returns (GetAllUsersResponse) {
    option (google.api.http) = {
      get: "/admin/users/all"
    };
  }

  // RPC za blokiranje korisnika
  rpc BlockUser (BlockUserRequest) returns (BlockUserResponse) {
    option (google.api.http) = {
      patch: "/admin/users/block/{id}"
      body: "*"
    };
  }

  // RPC za deblokiranje korisnika
  rpc UnblockUser (UnblockUserRequest) returns (UnblockUserResponse) {
    option (google.api.http) = {
      patch: "/admin/users/unblock/{id}"
      body: "*"
    };
  }
}

// ----------------- Poruke -----------------

message RegistrationRequest {
  string username = 1;
  string password = 2;
  string email    = 3;
  string role     = 4;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message AuthenticationResponse {
  string accessToken = 1;
}

message GetAllUsersRequest {}

message User {
  string id       = 1;
  string username = 2;
  string email    = 3;
  string role     = 4;
  bool isBlocked    = 5; // dodato polje da frontend zna da li je blokiran
}

message GetAllUsersResponse {
  repeated User users = 1;
}

// Blokiranje korisnika
message BlockUserRequest {
  string id = 1; // id korisnika koji se blokira
}
message BlockUserResponse {
  string message = 1;
}

// Deblokiranje korisnika
message UnblockUserRequest {
  string id = 1; // id korisnika koji se deblokira
}
message UnblockUserResponse {
  string message = 1;
}
