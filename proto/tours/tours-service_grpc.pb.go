// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: tours/tours-service.proto

package tours

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ToursService_CreateTour_FullMethodName     = "/ToursService/CreateTour"
	ToursService_GetAuthorTours_FullMethodName = "/ToursService/GetAuthorTours"
	ToursService_AddKeyPoint_FullMethodName    = "/ToursService/AddKeyPoint"
)

// ToursServiceClient is the client API for ToursService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToursServiceClient interface {
	// Kreiranje nove ture
	CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*TourResponse, error)
	// Preuzimanje svih tura od autora
	GetAuthorTours(ctx context.Context, in *GetAuthorToursRequest, opts ...grpc.CallOption) (*GetAuthorToursResponse, error)
	// Dodavanje klju훾ne ta훾ke na turu
	AddKeyPoint(ctx context.Context, in *AddKeyPointRequest, opts ...grpc.CallOption) (*KeyPointResponse, error)
}

type toursServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToursServiceClient(cc grpc.ClientConnInterface) ToursServiceClient {
	return &toursServiceClient{cc}
}

func (c *toursServiceClient) CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, ToursService_CreateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) GetAuthorTours(ctx context.Context, in *GetAuthorToursRequest, opts ...grpc.CallOption) (*GetAuthorToursResponse, error) {
	out := new(GetAuthorToursResponse)
	err := c.cc.Invoke(ctx, ToursService_GetAuthorTours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) AddKeyPoint(ctx context.Context, in *AddKeyPointRequest, opts ...grpc.CallOption) (*KeyPointResponse, error) {
	out := new(KeyPointResponse)
	err := c.cc.Invoke(ctx, ToursService_AddKeyPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToursServiceServer is the server API for ToursService service.
// All implementations must embed UnimplementedToursServiceServer
// for forward compatibility
type ToursServiceServer interface {
	// Kreiranje nove ture
	CreateTour(context.Context, *CreateTourRequest) (*TourResponse, error)
	// Preuzimanje svih tura od autora
	GetAuthorTours(context.Context, *GetAuthorToursRequest) (*GetAuthorToursResponse, error)
	// Dodavanje klju훾ne ta훾ke na turu
	AddKeyPoint(context.Context, *AddKeyPointRequest) (*KeyPointResponse, error)
	mustEmbedUnimplementedToursServiceServer()
}

// UnimplementedToursServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToursServiceServer struct {
}

func (UnimplementedToursServiceServer) CreateTour(context.Context, *CreateTourRequest) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedToursServiceServer) GetAuthorTours(context.Context, *GetAuthorToursRequest) (*GetAuthorToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorTours not implemented")
}
func (UnimplementedToursServiceServer) AddKeyPoint(context.Context, *AddKeyPointRequest) (*KeyPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKeyPoint not implemented")
}
func (UnimplementedToursServiceServer) mustEmbedUnimplementedToursServiceServer() {}

// UnsafeToursServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToursServiceServer will
// result in compilation errors.
type UnsafeToursServiceServer interface {
	mustEmbedUnimplementedToursServiceServer()
}

func RegisterToursServiceServer(s grpc.ServiceRegistrar, srv ToursServiceServer) {
	s.RegisterService(&ToursService_ServiceDesc, srv)
}

func _ToursService_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_CreateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).CreateTour(ctx, req.(*CreateTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_GetAuthorTours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorToursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetAuthorTours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_GetAuthorTours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetAuthorTours(ctx, req.(*GetAuthorToursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_AddKeyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeyPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).AddKeyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_AddKeyPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).AddKeyPoint(ctx, req.(*AddKeyPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToursService_ServiceDesc is the grpc.ServiceDesc for ToursService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToursService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ToursService",
	HandlerType: (*ToursServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTour",
			Handler:    _ToursService_CreateTour_Handler,
		},
		{
			MethodName: "GetAuthorTours",
			Handler:    _ToursService_GetAuthorTours_Handler,
		},
		{
			MethodName: "AddKeyPoint",
			Handler:    _ToursService_AddKeyPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tours/tours-service.proto",
}
